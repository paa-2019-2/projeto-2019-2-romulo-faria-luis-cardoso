%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Flavio L.C. de Moura
%%% Last modification:  April 28 2015
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort : THEORY
BEGIN

IMPORTING   sorting 
IMPORTING complexity

l,l1,l2 : VAR list[nat]
i,j,k,n,c : VAR nat

% This is the bubbling function that moves the greates key in
% the n-prefix of a list l to the n-th position of the list. 
bubbling(l, ( n : below[ l`length])) : RECURSIVE  list[nat] =
IF n = 0 THEN l
ELSIF car(l) > car(cdr(l)) THEN cons(car(cdr(l)), bubbling(cons(car(l),cdr(cdr(l))), n - 1))
ELSE cons(car(l), bubbling(cdr(l), n - 1))
ENDIF
MEASURE n   

%bubbling com contador
cbubbling(l, c, ( n : below[l`length])) : RECURSIVE [list[nat], nat] =
	IF n = 0 THEN (l, c)
	ELSIF car(l) > car(cdr(l)) THEN (cons(car(cdr(l)), aux`1), aux`2 + 1)
	     WHERE aux = cbubbling(cons(car(l),cdr(cdr(l))), c, n - 1)
	ELSE (cons(car(l), aux`1), aux`2 + 1)
 	     WHERE aux = cbubbling(cdr(l), c, n - 1)
	ENDIF
	MEASURE n

%equivalencia bubbling e cbubbling
cbubbling_equiv: LEMMA
		FORALL (l:list[nat], c:nat, n:below[l`length]):
			bubbling(l,n) = cbubbling(l,c,n)`1

			
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% This is the auxiliary function that calls bubbling adequately
% starting from n. The result is that the first n+1 elements of the
% given input list will be sorted. 
bubblesort_aux(l, ( n : below[l`length ] )) : RECURSIVE list[nat] =
IF n = 0 THEN l
ELSE bubblesort_aux(bubbling(l, n), n-1)
ENDIF
MEASURE n

%bubblesort_aux com contador
cbubblesort_aux(l, c, (n:below[l`length])) : RECURSIVE [list[nat], nat] =
	IF n = 0 THEN (l, c)
	ELSE cbubblesort_aux(aux`1, aux`2, n - 1)
		WHERE aux = cbubbling(l, c, n)
	ENDIF
	MEASURE n

%equivalencia bubblesort_aux e cbubblesort_aux
cbubblesort_aux_equiv: LEMMA
		FORALL (l:list[nat], c:nat, n:below[l`length]):
			bubblesort_aux(l,n) = cbubblesort_aux(l,c,n)`1



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% This is the main function which calls the auxiliary function
% bubblesort_aux starting from length of the input list minus one.  
% As result, bubblesort_aux will sort the whole input list.
bubblesort(l) : list[nat] = 
IF null?(l) THEN l
ELSE bubblesort_aux(l, l`length - 1 )
ENDIF

%


END bubblesort
